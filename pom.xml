<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>groupId</groupId>
    <artifactId>Kinesis-sparkStreamingSource</artifactId>
    <version>1.0.2</version>

    <licenses>
        <license>
            <name>The Apache Software License, Version 2.0</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
            <distribution>repo</distribution>
            <comments>A business-friendly OSS license</comments>
        </license>
    </licenses>

    <developers>
        <developer>
            <name>Cask Data</name>
            <email>cask-dev@googlegroups.com</email>
            <organization>Cask Data, Inc.</organization>
            <organizationUrl>http://www.cdap.io</organizationUrl>
        </developer>
    </developers>

    <scm>
        <connection>scm:https://github.com/hydrator/Kinesis-sparkStreamingSource.git</connection>
        <developerConnection>scm:git:git@github.com:hydrator/Kinesis-sparkStreamingSource.git</developerConnection>
        <url>https://github.com/hydrator/Kinesis-sparkStreamingSource</url>
        <tag>HEAD</tag>
    </scm>

    <issueManagement>
        <url>https://issues.cask.co/browse/HYDRATOR</url>
    </issueManagement>

    <distributionManagement>
        <repository>
            <id>sonatype.release</id>
            <url>https://oss.sonatype.org/service/local/staging/deploy/maven2</url>
        </repository>
        <snapshotRepository>
            <id>sonatype.snapshots</id>
            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
        </snapshotRepository>
        <site>
            <id>cask</id>
            <url>http://cask.co</url>
        </site>
    </distributionManagement>

    <repositories>
        <repository>
            <id>sonatype</id>
            <url>https://oss.sonatype.org/content/groups/public</url>
        </repository>
        <repository>
            <id>sonatype-snapshots</id>
            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
        </repository>
    </repositories>

    <properties>
        <cdap.version>5.1.2</cdap.version>
        <hadoop.version>2.3.0</hadoop.version>
        <junit.version>4.11</junit.version>
        <hydrator.version>2.1.0</hydrator.version>
        <spark.version>1.6.2</spark.version>
        <widgets.dir>widgets</widgets.dir>
        <docs.dir>docs</docs.dir>
        <app.parents>system:cdap-data-streams[5.0.0,6.0.0-SNAPSHOT)</app.parents>
        <!-- this is here because project.basedir evaluates to null in the script build step -->
        <main.basedir>${project.basedir}</main.basedir>
    </properties>

    <dependencies>
        <dependency>
            <groupId>co.cask.cdap</groupId>
            <artifactId>cdap-api</artifactId>
            <version>${cdap.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>co.cask.cdap</groupId>
            <artifactId>cdap-etl-api</artifactId>
            <version>${cdap.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>co.cask.cdap</groupId>
            <artifactId>cdap-unit-test</artifactId>
            <version>${cdap.version}</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>asm</groupId>
                    <artifactId>asm</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>co.cask.cdap</groupId>
            <artifactId>cdap-formats</artifactId>
            <version>${cdap.version}</version>
        </dependency>
        <dependency>
            <groupId>co.cask.cdap</groupId>
            <artifactId>cdap-etl-proto</artifactId>
            <version>${cdap.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>co.cask.cdap</groupId>
            <artifactId>cdap-etl-batch</artifactId>
            <version>${cdap.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>co.cask.cdap</groupId>
            <artifactId>cdap-data-pipeline</artifactId>
            <version>${cdap.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>co.cask.cdap</groupId>
            <artifactId>hydrator-test</artifactId>
            <version>${cdap.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>co.cask.hydrator</groupId>
            <artifactId>hydrator-common</artifactId>
            <version>${hydrator.version}</version>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>13.0.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.hadoop</groupId>
            <artifactId>hadoop-common</artifactId>
            <version>${hadoop.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.hadoop</groupId>
            <artifactId>hadoop-mapreduce-client-core</artifactId>
            <version>${hadoop.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>1.4</version>
        </dependency>
        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
            <version>1.6</version>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.3.6</version>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-streaming-kinesis-asl_2.10</artifactId>
            <version>1.6.2</version>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-core_2.10</artifactId>
            <version>${spark.version}</version>
            <scope>provided</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-log4j12</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>log4j</groupId>
                    <artifactId>log4j</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.apache.hadoop</groupId>
                    <artifactId>hadoop-client</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.esotericsoftware.reflectasm</groupId>
                    <artifactId>reflectasm</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.apache.curator</groupId>
                    <artifactId>curator-recipes</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.tachyonproject</groupId>
                    <artifactId>tachyon-client</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.scala-lang</groupId>
                    <artifactId>scala-compiler</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.eclipse.jetty.orbit</groupId>
                    <artifactId>javax.servlet</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>net.java.dev.jets3t</groupId>
                    <artifactId>jets3t</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>

    <build>
        <pluginManagement>
            <plugins>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.7.0</version>
                <configuration>
                    <source>1.7</source>
                    <target>1.7</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.14.1</version>
                <configuration>
                    <argLine>-Xmx3g -Djava.awt.headless=true -XX:MaxPermSize=256m -XX:+UseConcMarkSweepGC
                        -Djava.net.preferIPv4Stack=true
                    </argLine>
                    <redirectTestOutputToFile>${surefire.redirectTestOutputToFile}</redirectTestOutputToFile>
                    <reuseForks>false</reuseForks>
                    <reportFormat>plain</reportFormat>
                    <systemPropertyVariables>
                        <java.io.tmpdir>${project.build.directory}</java.io.tmpdir>
                    </systemPropertyVariables>
                    <includes>
                        <include>**/*TestsSuite.java</include>
                        <include>**/*TestSuite.java</include>
                        <include>**/Test*.java</include>
                        <include>**/*Test.java</include>
                        <include>**/*TestCase.java</include>
                    </includes>
                    <excludes>
                        <exclude>**/*TestRun.java</exclude>
                    </excludes>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.apache.maven.surefire</groupId>
                        <artifactId>surefire-junit47</artifactId>
                        <version>2.14</version>
                    </dependency>
                </dependencies>
            </plugin>
            <plugin>
                <groupId>org.apache.rat</groupId>
                <artifactId>apache-rat-plugin</artifactId>
                <version>0.10</version>
                <dependencies>
                    <dependency>
                        <groupId>org.apache.maven.doxia</groupId>
                        <artifactId>doxia-core</artifactId>
                        <version>1.6</version>
                        <exclusions>
                            <exclusion>
                                <groupId>xerces</groupId>
                                <artifactId>xercesImpl</artifactId>
                            </exclusion>
                        </exclusions>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <id>rat-check</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                        <configuration>
                            <excludes>
                                <exclude>LICENSE*.txt</exclude>
                                <!-- This file should be not be there, but I am excluding it for now -->
                                <exclude>*.rst</exclude>
                                <exclude>*.md</exclude>
                                <exclude>**/*.cdap</exclude>
                                <exclude>**/*.yaml</exclude>
                                <exclude>**/*.md</exclude>
                                <exclude>logs/**</exclude>
                                <exclude>.git/**</exclude>
                                <exclude>.idea/**</exclude>
                                <exclude>**/grok/patterns/**</exclude>
                                <exclude>conf/**</exclude>
                                <exclude>data/**</exclude>
                                <exclude>plugins/**</exclude>
                                <exlcude>**/*.patch</exlcude>
                                <exclude>**/logrotate.d/**</exclude>
                                <exclude>**/limits.d/**</exclude>
                                <exclude>**/*.json</exclude>
                                <exclude>**/*.json.template</exclude>
                                <exclude>**/MANIFEST.MF</exclude>
                                <!-- exclude any hack classes -->
                                <exclude>**/org/apache/hadoop/**</exclude>
                                <!-- exclude resource files-->
                                <exclude>**/resources/**</exclude>
                            </excludes>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>2.17</version>
                <executions>
                    <execution>
                        <id>validate</id>
                        <phase>process-test-classes</phase>
                        <configuration>
                            <configLocation>checkstyle.xml</configLocation>
                            <suppressionsLocation>suppressions.xml</suppressionsLocation>
                            <encoding>UTF-8</encoding>
                            <consoleOutput>true</consoleOutput>
                            <failsOnError>true</failsOnError>
                            <includeTestSourceDirectory>true</includeTestSourceDirectory>
                            <excludes>**/org/apache/cassandra/**,**/org/apache/hadoop/**</excludes>
                        </configuration>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>com.puppycrawl.tools</groupId>
                        <artifactId>checkstyle</artifactId>
                        <version>6.19</version>
                    </dependency>
                </dependencies>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>1.7</version>
                <executions>
                    <!-- Create the config file for artifact which can be used to deploy the artifact.
                         Sets the parents field to system:cdap-etl-batch and system:cdap-etl-realtime with whatever
                         version range is set in the app.parents property.
                         also sets a widget and doc property for each file contained in the widgets and docs directories. -->
                    <execution>
                        <id>create-artifact-config</id>
                        <phase>prepare-package</phase>
                        <configuration>
                            <target>
                                <script language="javascript"> <![CDATA[
                  // for some reason, project.basedir evaluates to null if we just get the property here.
                  // so we set main.basedir to project.basedir in the pom properties, then main.basedir is used here
                  // where it evaluates correctly for whatever reason
                  var baseDir = project.getProperty("main.basedir");
                  var targetDir = project.getProperty("project.build.directory");
                  var artifactId = project.getProperty("project.artifactId");
                  var version = project.getProperty("project.version");
                  var cfgFile = new java.io.File(targetDir, artifactId + "-" + version + ".json");
                  if (!cfgFile.exists()) {
                    cfgFile.createNewFile();
                  }
                  var parents = project.getProperty("app.parents").split(",");
                  var config = {
                    "parents": [ ],
                    "properties": {}
                  }
                  for (i = 0; i < parents.length; i+=2) {
                    // because name1[lo,hi],name2[lo,hi] gets split into "name1[lo", "hi]", "name2[lo", "hi]"
                    // so we have to combine them again
                    config.parents.push(parents[i] + "," + parents[i+1]);
                  }
                  // look in widgets directory for widget config for each plugin
                  var widgetsDir = new java.io.File(baseDir, project.getProperty("widgets.dir"));
                  if (widgetsDir.isDirectory()) {
                    var widgetsFiles = widgetsDir.listFiles();
                    for (i = 0; i < widgetsFiles.length; i++) {
                      var widgetsFile = widgetsFiles[i];
                      if (widgetsFile.isFile()) {
                        var propertyName = "widgets." + widgetsFile.getName();
                        // if the filename ends with .json
                        if (propertyName.indexOf(".json", propertyName.length - 5) !== -1) {
                          // strip the .json
                          propertyName = propertyName.slice(0, -5);
                          var contents = new java.lang.String(java.nio.file.Files.readAllBytes(widgetsFile.toPath()), java.nio.charset.StandardCharsets.UTF_8);
                          var contentsAsJson = JSON.parse(contents);
                          config.properties[propertyName] = JSON.stringify(contentsAsJson);
                        }
                      }
                    }
                  }
                  // look in the docs directory for docs for each plugin
                  var docsDir = new java.io.File(baseDir, project.getProperty("docs.dir"));
                  if (docsDir.isDirectory()) {
                    var docFiles = docsDir.listFiles();
                    for (i = 0; i < docFiles.length; i++) {
                      var docFile = docFiles[i];
                      if (docFile.isFile()) {
                        var propertyName = "doc." + docFile.getName();
                        // if the filename ends with .md
                        if (propertyName.indexOf(".md", propertyName.length - 3) !== -1) {
                          // strip the extension
                          propertyName = propertyName.slice(0, -3);
                          var contents = new java.lang.String(java.nio.file.Files.readAllBytes(docFile.toPath()), java.nio.charset.StandardCharsets.UTF_8);
                          config.properties[propertyName] = contents + "";
                        }
                      }
                    }
                  }
                  var fw = new java.io.BufferedWriter(new java.io.FileWriter(cfgFile.getAbsoluteFile()));
                  fw.write(JSON.stringify(config, null, 2));
                  fw.close();
                ]]></script>
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.felix</groupId>
                <artifactId>maven-bundle-plugin</artifactId>
                <version>3.5.1</version>
                <extensions>true</extensions>
                <configuration>
                    <instructions>
                        <_exportcontents>co.cask.hydrator.plugin.*;com.amazonaws.services.kinesis.*;
                            org.apache.spark.streaming.kinesis.*;org.apache.spark.streaming.scheduler.*;
                            com.amazonaws.*;com.amazonaws.protocol.json.*;
                        </_exportcontents>
                        <Embed-Dependency>*;inline=false;scope=compile</Embed-Dependency>
                        <Embed-Transitive>true</Embed-Transitive>
                        <Embed-Directory>lib</Embed-Directory>
                        <!--Only @Plugin classes in the export packages will be included as plugin-->
                    </instructions>
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>bundle</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    
</project>
